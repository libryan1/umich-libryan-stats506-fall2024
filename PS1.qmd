---
title: "STATS506 Problem Set #1"
author: "Bryan Li"
format: html
editor: visual
---

Github: https://github.com/libryan1/umich-libryan-stats506-fall2024

## Problem #1 - Wine Data

### a.

```{r}
wine <- read.table(file = "Datasets/wine/wine.data",
                   sep = ',',
                   col.names = c('class', 'alcohol', 'malic_acid', 'ash', 'alcalinity_of_ash', 'magnesium', 'total_phenols', 'flavanoids', 'nonflavanoid_phenols', 'proanthocyanins', 'color_intensity', 'hue', 'OD280_and_OD314_of_diluted_wines', 'proline'))
head(wine)
```

### b.

```{r}
table(wine$class)
```

wine.names states that there are 59 wines of class 1, 71 of class 2, and 48 of class 3. This is confirmed by the previous table.

### c.

1.  

```{r}
cor(wine$alcohol, wine$color_intensity)
```

2.  

```{r}
cor(wine$alcohol[wine$class == 1], wine$color_intensity[wine$class == 1])
cor(wine$alcohol[wine$class == 2], wine$color_intensity[wine$class == 2])
cor(wine$alcohol[wine$class == 3], wine$color_intensity[wine$class == 3])
```

Class 1 has the highest, class 2 the lowest.

3.  

```{r}
wine$alcohol[wine$color_intensity == max(wine$color_intensity)]
```

4.  

```{r}
proanthocyanins_greater_ash_vec <- c(wine$proanthocyanins > wine$ash)
proanthocyanins_greater_ash_perc <- mean(proanthocyanins_greater_ash_vec)
print(paste("Percentage of Wines with a Higher Content of Proanthocyanins than Ash:", proanthocyanins_greater_ash_perc, sep = ' '))
```

### d.

```{r}
wine_mean_table <- data.frame(Class = c('1', '2', '3', 'Overall'))
for (i in 2:ncol(wine)) {
  class_means <- tapply(wine[, i], wine$class, mean)
  overall_mean <- mean(wine[, i])
  wine_mean_table[names(wine)[i]] <- c(class_means[1], class_means[2], class_means[3], overall_mean)
}
wine_mean_table
```

### e.

```{r}
test_stat <- function(mu1, mu2, s1, s2, n1, n2) {
  return((mu1 - mu2) / sqrt( ((s1^2)/n1) + ((s2^2)/n2)))
}

dof <- function(s1, s2, n1, n2) {
  numer <- ( ((s1^2)/n1) + ((s2^2)/n2) )^2
  denom <- ( ( (((s1^2)/n1)^2 ) / (n1 - 1) ) + ( (((s2^2)/n2)^2 ) / (n2 - 1)) )
  return(numer/denom)
}

t_test_diff_2_tail <- function(mu1, mu2, s1, s2, n1, n2) {
  test_stat <- test_stat(mu1, mu2, s1, s2, n1, n2)
  dof <- dof(s1, s2, n1, n2)
  
  if (test_stat > 0.5) {
    return(pt(test_stat, dof, lower.tail = FALSE) * 2)
  } else {
    return(pt(test_stat, dof, lower.tail = TRUE) * 2)
  }
}
```

```{r}
mean1 <- mean(wine$total_phenols[wine$class == 1])
sd1 <- sd(wine$total_phenols[wine$class == 1])
n1 <- length(wine$total_phenols[wine$class == 1])

mean2 <- mean(wine$total_phenols[wine$class == 2])
sd2 <- sd(wine$total_phenols[wine$class == 2])
n2 <- length(wine$total_phenols[wine$class == 2])

mean3 <- mean(wine$total_phenols[wine$class == 3])
sd3 <- sd(wine$total_phenols[wine$class == 3])
n3 <- length(wine$total_phenols[wine$class == 3])


# Class 1 vs 2
# H0: mu1 = mu2
# H1: mu1 != mu2
print(paste('P-Value of Class 1 vs 2:', t_test_diff_2_tail(mean1, mean2, sd1, sd2, n1, n2), sep = ''))
print(paste('Class 1 vs 2 Test Statistic:', test_stat(mean1, mean2, sd1, sd2, n1, n2), sep = ''))
print(paste('Class 1 vs 2 DoF:', dof(sd1, sd2, n1, n2), sep = ''))

# Class 2 vs 3
# H0: mu2 = mu3
# h1: mu2 != mu3
print(paste('P-Value of Class 2 vs 3:', t_test_diff_2_tail(mean2, mean3, sd2, sd3, n2, n3), sep = ''))
print(paste('Class 2 vs 3 Test Statistic:', test_stat(mean2, mean3, sd2, sd3, n2, n3), sep = ''))
print(paste('Class 2 vs 3 DoF:', dof(sd2, sd3, n2, n3), sep = ''))

# Class 1 vs 3
# H0: mu1 = mu3
# H1: mu1 != mu3
print(paste('P-Value of Class 1 vs 3:', t_test_diff_2_tail(mean1, mean3, sd1, sd3, n1, n3), sep = ''))
print(paste('Class 1 vs 3 Test Statistic:', test_stat(mean1, mean3, sd1, sd3, n1, n3), sep = ''))
print(paste('Class 1 vs 3 DoF:', dof(sd1, sd3, n1, n3), sep = ''))
```

All three tests are statistically significant at a significance value of 0.05. At $\alpha = 0.05$ we reject the null hypothesis for all three tests, the mean total phenols are different between all classes of wine.

## Problem #2 - AskAManager.org Data

### a.

```{r}
askaman <- read.csv(file = "Datasets/AskAManager.csv")
askaman$X <- NULL
```

### b.

```{r}
colnames(askaman) <- c('timestamp', 'age_cohort', 'industry', 'title', 'job_context', 'ann_salary', 'salary_bonuses', 'salary_currency', 'other_currency', 'salary_context', 'country', 'us_state', 'city', 'years_experience', 'years_experience_field', 'education', 'gender', 'race')
head(askaman)
```

### c.

```{r}
print(paste('Observations before limiting to USD:', nrow(askaman)))

askaman <- subset(askaman, salary_currency == 'USD')

print(paste('Observations after limiting to USD:', nrow(askaman)))
```

### d.

```{r}
library(dplyr)
askaman <- mutate(askaman, max_age = ifelse(age_cohort == 'under 18', 17,
                                            ifelse(age_cohort == '18-24', 24,
                                                   ifelse(age_cohort == '25-34', 34,
                                                          ifelse(age_cohort == '35-44', 44,
                                                                 ifelse(age_cohort == '45-54', 54,
                                                                        ifelse(age_cohort == '55-64', 64, 65)))))))

askaman <- mutate(askaman, min_yrs_exp = ifelse(years_experience == '1 year or less', 0,
                                                ifelse(years_experience == '2 - 4 years', 2,
                                                       ifelse(years_experience == '5-7 years', 5,
                                                              ifelse(years_experience == '8 - 10 years', 8,
                                                                     ifelse(years_experience == '11 - 20 years', 11,
                                                                            ifelse(years_experience == '21 - 30 years', 21,
                                                                                   ifelse(years_experience == '31 - 40 years', 31, 41))))))))

askaman <- mutate(askaman, min_yrs_field = ifelse(years_experience_field == '1 year or less', 0,
                                                  ifelse(years_experience_field == '2 - 4 years', 2,
                                                         ifelse(years_experience_field == '5-7 years', 5,
                                                                ifelse(years_experience_field == '8 - 10 years', 8,
                                                                       ifelse(years_experience_field == '11 - 20 years', 11,
                                                                              ifelse(years_experience_field == '21 - 30 years', 21,
                                                                                     ifelse(years_experience_field == '31 - 40 years', 31, 41))))))))

# Remove all under 18; combos where age, experience, and field experience impossible
askaman <- subset(askaman, max_age > 17 & max_age >= min_yrs_exp & max_age >= min_yrs_field & min_yrs_exp >= min_yrs_field)

print(paste('Number of Observations: ', nrow(askaman)))
```

### e.

```{r}
length(subset(askaman, ann_salary > 500000))
```
We see that only 21 out of 23,142 people make more than 500,000 annually, so let's remove them from the data.

```{r}
askaman <- subset(askaman, ann_salary <= 500000)
```

```{r}
length(subset(askaman, ann_salary < 1000))
```

We see that only 21 of the 23,142 people make less than 1,000.  Additionally, any job making less than 1,000 a year probably isn't worth keeping track of.  Let's remove them from the data.

```{r}
askaman <- subset(askaman, ann_salary >= 1000)
```

```{r}
print(paste('Final Sample Size: ', nrow(askaman), sep = ''))
```

## Problem 3 - Palindromic Numbers

### a.

```{r}
isPalindromic <- function(num) {
  digit_vec <- unlist(strsplit(toString(num), split = ''))
  
  # Get reversed number
  reversed <- c()
  n = length(digit_vec)
  while (n > 0) {
    reversed <- c(reversed, digit_vec[n])
    n = n - 1
  }
  reversed <- as.integer(paste(reversed, collapse = ''))
  
  n = length(digit_vec)
  len = length(digit_vec)
  i = 1
  status = TRUE
  # Even length numbers
  if (n %% 2 == 0) {
    while (i <= len/2) {
      if (digit_vec[i] == digit_vec[n]) {
        i = i + 1
        n = n - 1
      } else {
        status = FALSE
        break
      }
    }
    return(list('isPalindromic' = status, 'reversed' = reversed))
  } else { # Odd length numbers
    while (i < len/2) {
      if (digit_vec[i] == digit_vec[n]) {
        i = i + 1
        n = n - 1
      } else {
        status = FALSE
        break
      }
    }
    return(list('isPalindromic' = status, 'reversed' = reversed))
  }
}
```

### b.

```{r}
nextPalindrome <- function(num) {
  num = num + 1
  status = FALSE
  while (status == FALSE) {
    if (unlist(isPalindromic(num)[1]) == TRUE) {
      return(num)
    } else{
      num = num + 1
    }
  }
}
```

### c.

```{r}
nums <- c(391, 9928, 19272719, 109, 2)
for (num in nums) {
  print(paste('Palindrome after ', num, ': ', nextPalindrome(num), sep = ''))
}
```

